/**
 * Idiomatic Javascript eventing to implement Publisher-Subscriber pattern
 * 
 * Publishers: instead of document.dispatchEvent(...) use this handy 
 *             'notify_all(event-string)' function
 * Subscribers: use the normal document.addEventListener(event-string)
 * 
 * Publishing events
 * -----------------
 * The event name is the most important, followed by a couple of optional 
 * extra parameters 'from' and 'data':
 * 
 * notify_all(event_name, from, data)
 * 
 * e.g. notify_all("hello")
 * e.g. notify_all("hello", this)
 * e.g. notify_all("hello", this, data)
 * 
 * A custom event is generated and broadcast to the document element. Using the document element
 * as an 'event bus' is an arbitrary decision - we could have used some other DOM element.
 * 
 * The 'from' parameter can be any object, typically the sender itself.
 * The 'data' parameter can be anything, as long as the subscriber knows what is is. It could be a number,
 * a string, or an object with lots of extra info inside e.g. {'more info': ..., 'info2': ...}
 * 
 * Subscribing to events
 * ---------------------
 * Subscribers (or Observers) should be wired up with 
 * 
 * e.g. document.addEventListener("hello", (event) => { ... })
 * 
 * You can access the event name string in 'event.type' e.g. 'hello'
 * You can access the event 'from' parameter in 'event.detail.from'
 * You can access the event 'data' parameter in 'event.detail.data'
 * 
 * To remove an event listener
 * --------------------------------------
 * To remove an event listener use document.removeEventListener() and specify the function that
 * was originally registered. 
 * 
 * Advanced - removing an anonymous event listener:
 * 
 * You cannot easily unhook anonymous functions, see https://www.w3schools.com/jsref/met_element_removeeventlistener.asp
 * You cannot easily remove functions that have been called using bind() cos this creates an anonymous function too!
 * 
 * The problem is, when you add then remove a listener, the event name (a string) and the function 'f'
 * 
 *    document.addEventListener(event_str, f)
 *    document.removeEventListener(event_str, f)
 * 
 * must match exactly - the 'f' is tricky e.g. if an anonymous function is used e.g.
 * 
 *    document.addEventListener("hello", (event) => { ... })
 * 
 * then that anonymous function can never be matched again in the future. There is no reference to it we can use.
 * Also a known (non anonymous) function that is 'tweaked' using .bind() also creates an anonymous function 
 * that can never be matched again in the future.
 *
 * Solution: if you remember the func generated by using bind() - then you can remove the anonymous function.
 * Here is an example where we remember the exact signature of the listening function after it goes through
 * .bind() mangling - so that we can later accurately remove that listening function
 * 
 * 		notify_func = mynotify.bind(this)  // where 'mynotify' is a function (event) => { ... }
 *    document.addEventListener("hello", notify_func)
 * 
 *    document.removeEventListener("hello", notify_func)
 * 
 * P.S. The reason we were using .bind() in the first place, which got us into this anonymous function trouble, is 
 * so that 'this' inside the listener function refers to something specific that you want e.g. when you define
 * the listening function within a controller class then its nice to be able have 'this' to continue to refer to 
 * the controller class instance when the event fires and listening function runs.
 * 
 * See https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener for more discussion and 
 * tips on removing event listeners in these special cases. 
 * 
 * 
 * @param {string} event_name name of the event
 * @param {object} from typically who is doing the notification, caller passes this in explicitly [optional]
 * @param {object or dictionary} data arbitrary info [optional]
 */
function notify_all(event_name, from, data) {
  console.log(`notify all of event '${event_name}' ${from != null ? 'from: ' + from.constructor.name : 'from unspecified'} ${data != null ? 'data: ' + data : ''}`)
  document.dispatchEvent(new CustomEvent(event_name, { detail: {from: from, data: data } }))

  // debugging hook
  document.dispatchEvent(new CustomEvent("notify all called", { detail: {event_name: event_name, target: from, data: data } }))
}
